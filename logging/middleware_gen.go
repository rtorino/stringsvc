// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

// Package logging defines a function for creating a go-kit logging StringServiceMiddleware
package logging

import (
	"time"

	"github.com/go-kit/kit/log"

	"github.com/wavecell/stringsvc"
	"github.com/wavecell/stringsvc/endpoint"
)

type loggingStringService struct {
	logger log.Logger
	stringsvc.StringService
	root stringsvc.StringService
}

// Middleware represents a middleware used to wrap a github.com/wavecell/stringsvc.StringService and provides logging functionality.
func Middleware(logger log.Logger, root stringsvc.StringService) endpoint.StringServiceMiddleware {
	return func(next stringsvc.StringService) stringsvc.StringService {
		return loggingStringService{
			logger:        logger,
			StringService: next,
			root:          root,
		}
	}
}

// Uppercase implements github.com/wavecell/stringsvc.StringService
func (stringservice loggingStringService) Uppercase(str string) (upper string, err error) {
	defer func(begin time.Time) {
		_ = stringservice.logger.Log(
			"method", endpoint.PathUppercase,

			"upper", upper,
			"err", err,

			"str", str,

			"took", time.Since(begin),
		)
	}(time.Now())

	upper, err = stringservice.StringService.Uppercase(str)
	return
}

// Count implements github.com/wavecell/stringsvc.StringService
func (stringservice loggingStringService) Count(str string) (count int) {
	defer func(begin time.Time) {
		_ = stringservice.logger.Log(
			"method", endpoint.PathCount,

			"count", count,

			"str", str,

			"took", time.Since(begin),
		)
	}(time.Now())

	count = stringservice.StringService.Count(str)
	return
}
