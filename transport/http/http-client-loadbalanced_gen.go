// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package transport

import (
	"golang.org/x/net/context"

	kitendpoint "github.com/go-kit/kit/endpoint"
	kitloadbalancer "github.com/go-kit/kit/loadbalancer"

	"github.com/wavecell/stringsvc"
	"github.com/wavecell/stringsvc/endpoint"
)

// endpointFromLoadBalancer is a nice helper function that will pull an endpoint
// off of a load balancer and initiate the request.  However, if an error is
// encountered, it will handle it instead.
func endpointFromLoadBalancer(lb kitloadbalancer.LoadBalancer) kitendpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		ep, err := lb.Endpoint()
		if err != nil {
			return nil, err
		}

		return ep(ctx, request)
	}
}

// GetLoadBalancerFunc describes a function which takes a
// github.com/go-kit/kit/loadbalancer.LoadBalancer and returns a
// github.com/go-kit/kit/loadbalancer.LoadBalancer
type GetLoadBalancerFunc func(kitloadbalancer.Factory) kitloadbalancer.LoadBalancer

// NewHTTPLoadBalancedClient is a function that will return a Load balanced
// client based on the load balancing conversion function provided.
func NewHTTPLoadBalancedClient(get GetLoadBalancerFunc, wrappers ...kitendpoint.Middleware) stringsvc.StringService {
	return &clientStringService{

		uppercaseEndpoint: endpointFromLoadBalancer(get(httpFactory(endpoint.PathUppercase, encodeUppercaseRequest, decodeUppercaseResponse, wrappers...))),
		countEndpoint:     endpointFromLoadBalancer(get(httpFactory(endpoint.PathCount, encodeCountRequest, decodeCountResponse, wrappers...))),
	}
}
