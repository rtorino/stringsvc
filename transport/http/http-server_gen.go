// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package transport

import (
	"net/http"

	"golang.org/x/net/context"

	ep "github.com/go-kit/kit/endpoint"
	httptransport "github.com/go-kit/kit/transport/http"

	"github.com/wavecell/stringsvc"
	"github.com/wavecell/stringsvc/endpoint"
)

type toEndpoint func(stringsvc.StringService) ep.Endpoint

// ServerLayer is a wrapper for github.com/wavecell/stringsvc.StringService which returns a
// github.com/go-kit/kit/endpoint.Middleware.  This allows you to specify
// Middleware while creating HTTP Servers.
type ServerLayer func(base stringsvc.StringService, path string) ep.Middleware

func epID(ep ep.Endpoint) ep.Endpoint {
	return ep
}

// HTTPServersForEndpoints will take the given arguments, associate all of
// the proper endpoints together, and register itself as an HTTP handler for
// github.com/wavecell/stringsvc.StringService
func HTTPServersForEndpoints(stringService stringsvc.StringService, wrappers ...ServerLayer) {
	ctx := context.Background()
	f := func(path string, endp toEndpoint, dec httptransport.DecodeRequestFunc, enc httptransport.EncodeResponseFunc) {

		var mappedLayers []ep.Middleware
		for _, w := range wrappers {
			mappedLayers = append(mappedLayers, w(stringService, path))
		}

		http.Handle(path,
			httptransport.NewServer(
				ctx,
				ep.Chain(epID, mappedLayers...)(endp(stringService)),
				dec,
				enc,
			),
		)
	}
	f(endpoint.PathUppercase, makeUppercaseEndpoint, decodeUppercaseRequest, encodeUppercaseResponse)
	f(endpoint.PathCount, makeCountEndpoint, decodeCountRequest, encodeCountResponse)
}
