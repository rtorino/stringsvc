// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package transport

import (
	"golang.org/x/net/context"

	"github.com/go-kit/kit/endpoint"

	"github.com/wavecell/stringsvc"
)

// makeUppercaseEndpoint creates a github.com/go-kit/kit/endpoint.Endpoint for github.com/wavecell/stringsvc.StringService.Uppercase.
// It will automatically wrap and unwrap the arguments and results of the method.
func makeUppercaseEndpoint(stringService stringsvc.StringService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*uppercaseRequest)
		var resp uppercaseResponse
		resp.embedMime = new(embedMime)

		str := req.Str

		upper, err := stringService.Uppercase(str)
		resp.Upper = upper
		resp.Err = err

		if mime := req.GetMime(); mime != "" {
			resp.SetMime(mime)
		}

		return resp, nil
	}
}

// makeCountEndpoint creates a github.com/go-kit/kit/endpoint.Endpoint for github.com/wavecell/stringsvc.StringService.Count.
// It will automatically wrap and unwrap the arguments and results of the method.
func makeCountEndpoint(stringService stringsvc.StringService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*countRequest)
		var resp countResponse
		resp.embedMime = new(embedMime)

		str := req.Str

		count := stringService.Count(str)
		resp.Count = count

		if mime := req.GetMime(); mime != "" {
			resp.SetMime(mime)
		}

		return resp, nil
	}
}
